<?php

/**
 * @file
 * Schema function for file hash module.
 */

use Drupal\Core\Database\StatementInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\filehash\Form\FileHashConfigForm;

/**
 * Implements hook_requirements().
 *
 * @phpstan-ignore-next-line Hook implementations should not duplicate @param
 * documentation.
 */
function filehash_requirements($phase): array {
  $requirements = [];
  if ('runtime' === $phase && preg_grep('/^blake/', Drupal::service('filehash')->getEnabledAlgorithms())) {
    $requirements['filehash_sodium'] = [
      'title' => t('Sodium PHP extension'),
      'description' => t('File Hash is configured to use the BLAKE2b hash algorithm, which requires the Sodium PHP extension.'),
    ];
    if (function_exists('sodium_crypto_generichash_init')) {
      $requirements['filehash_sodium']['value'] = t('Enabled');
      $requirements['filehash_sodium']['severity'] = REQUIREMENT_OK;
    }
    else {
      $requirements['filehash_sodium']['value'] = t('Not enabled');
      $requirements['filehash_sodium']['severity'] = REQUIREMENT_WARNING;
    }
  }
  return $requirements;
}

/**
 * Add file hash columns to the file_managed table.
 */
function filehash_update_8200(): TranslatableMarkup {
  Drupal::service('filehash')->addColumns();
  return t('File hashes will now be stored in the file_managed table, and are directly available as base fields on file entities. You may need to update any views, templates, etc. that use file hashes.');
}

/**
 * Migrate file hashes from the filehash table to the file_managed table.
 *
 * Warning: Any data for disabled file hash algorithms will not be migrated!
 * Please ensure hash algorithms for which you want to save data are enabled
 * before running this update.
 *
 * @param mixed[] $sandbox
 *   Batch sandbox.
 */
function filehash_update_8201(array &$sandbox): TranslatableMarkup {
  $columns = Drupal::service('filehash')->getEnabledAlgorithms();
  if (!$columns) {
    return t('No file hash algorithms are enabled, so no data was migrated from the filehash table.');
  }
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $statement = Drupal::database()->query('SELECT COUNT(fid) FROM {filehash}');
    assert($statement instanceof StatementInterface);
    $sandbox['max'] = $statement->fetchField();
  }
  $records = Drupal::database()
    ->select('filehash')
    ->fields('filehash', ['fid' => 'fid'] + $columns)
    ->range(0, 1)
    ->execute();
  assert($records instanceof StatementInterface);
  foreach ($records as $record) {
    $fields = [];
    foreach ($columns as $column) {
      $fields[$column] = $record->{$column};
    }
    Drupal::database()
      ->update('file_managed')
      ->fields($fields)
      ->condition('fid', $record->fid)
      ->execute();
    Drupal::database()
      ->delete('filehash')
      ->condition('fid', $record->fid)
      ->execute();
    $sandbox['progress']++;
  }
  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : $sandbox['progress'] / $sandbox['max'];
  return t('All file hashes have been migrated from the filehash table to the file_managed table.');
}

/**
 * Drop the filehash table.
 *
 * Warning: Any data for disabled file hash algorithms was not migrated and will
 * be permanently deleted!
 */
function filehash_update_8202(): TranslatableMarkup {
  Drupal::database()->schema()->dropTable('filehash');
  return t('The filehash table has been dropped.');
}

/**
 * Enable the "Always rehash file when saving" setting.
 */
function filehash_update_8203(): TranslatableMarkup {
  $dedupe = Drupal::config('filehash.settings')->get('dedupe') ?? 0;
  assert(is_scalar($dedupe));
  Drupal::configFactory()
    ->getEditable('filehash.settings')
    ->set('rehash', TRUE)
    ->set('dedupe', (int) $dedupe)
    ->save();
  return t('The <em>Always rehash file when saving</em> setting has been enabled to match previous File Hash module behavior. You can disable this setting if you do not have any modules that modify files after creation, or you do not want to keep file hashes in sync with the file on disk. Note: If you were using the dedupe setting, you now have the option to turn it off and configure dedupe in the widget settings for each upload field.');
}

/**
 * Enable the automatic hash on load setting.
 */
function filehash_update_8204(): TranslatableMarkup {
  Drupal::configFactory()
    ->getEditable('filehash.settings')
    ->set('autohash', TRUE)
    ->save();
  return t('The <em>Automatically generate missing hashes when loading files</em> setting has been enabled to match previous File Hash module behavior.');
}

/**
 * Update name and data type of filehash.settings algorithms config.
 */
function filehash_update_10301(): void {
  $config = Drupal::configFactory()->getEditable('filehash.settings');
  $algorithms = $config->get('algos');
  if (!is_array($algorithms)) {
    $algorithms = [];
  }
  $config->set('algorithms', FileHashConfigForm::checkboxesToBooleans($algorithms))
    ->clear('algos')
    ->save();
}
